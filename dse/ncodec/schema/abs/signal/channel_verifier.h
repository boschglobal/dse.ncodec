#ifndef CHANNEL_VERIFIER_H
#define CHANNEL_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef CHANNEL_READER_H
#include "channel_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int AutomotiveBus_Signal_Channel_SignalLookup_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Signal_Channel_SignalIndex_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Signal_Channel_SignalWrite_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Signal_Channel_SignalRead_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Signal_Channel_SignalValue_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Signal_Channel_ChannelMessage_verify_table(flatcc_table_verifier_descriptor_t *td);

static int AutomotiveBus_Signal_Channel_MessageType_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, AutomotiveBus_Signal_Channel_SignalWrite_verify_table); /* SignalWrite */
    case 2: return flatcc_verify_union_table(ud, AutomotiveBus_Signal_Channel_SignalRead_verify_table); /* SignalRead */
    case 3: return flatcc_verify_union_table(ud, AutomotiveBus_Signal_Channel_SignalValue_verify_table); /* SignalValue */
    case 4: return flatcc_verify_union_table(ud, AutomotiveBus_Signal_Channel_SignalIndex_verify_table); /* SignalIndex */
    default: return flatcc_verify_ok;
    }
}

static int AutomotiveBus_Signal_Channel_SignalLookup_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* signal_uid */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* name */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_SignalLookup_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalLookup_identifier, &AutomotiveBus_Signal_Channel_SignalLookup_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalLookup_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalLookup_type_identifier, &AutomotiveBus_Signal_Channel_SignalLookup_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalLookup_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_SignalLookup_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalLookup_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_SignalLookup_verify_table);
}

static int AutomotiveBus_Signal_Channel_SignalIndex_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &AutomotiveBus_Signal_Channel_SignalLookup_verify_table) /* indexes */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_SignalIndex_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalIndex_identifier, &AutomotiveBus_Signal_Channel_SignalIndex_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalIndex_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalIndex_type_identifier, &AutomotiveBus_Signal_Channel_SignalIndex_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalIndex_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_SignalIndex_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalIndex_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_SignalIndex_verify_table);
}

static int AutomotiveBus_Signal_Channel_SignalWrite_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_SignalWrite_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalWrite_identifier, &AutomotiveBus_Signal_Channel_SignalWrite_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalWrite_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalWrite_type_identifier, &AutomotiveBus_Signal_Channel_SignalWrite_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalWrite_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_SignalWrite_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalWrite_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_SignalWrite_verify_table);
}

static int AutomotiveBus_Signal_Channel_SignalRead_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_SignalRead_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalRead_identifier, &AutomotiveBus_Signal_Channel_SignalRead_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalRead_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalRead_type_identifier, &AutomotiveBus_Signal_Channel_SignalRead_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalRead_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_SignalRead_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalRead_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_SignalRead_verify_table);
}

static int AutomotiveBus_Signal_Channel_SignalValue_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_SignalValue_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalValue_identifier, &AutomotiveBus_Signal_Channel_SignalValue_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalValue_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_SignalValue_type_identifier, &AutomotiveBus_Signal_Channel_SignalValue_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalValue_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_SignalValue_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_SignalValue_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_SignalValue_verify_table);
}

static int AutomotiveBus_Signal_Channel_ChannelMessage_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* model_uid */)) return ret;
    if ((ret = flatcc_verify_union_field(td, 2, 0, &AutomotiveBus_Signal_Channel_MessageType_union_verifier) /* message */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* control_code */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* token */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* rc */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 6, 0) /* response */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Signal_Channel_ChannelMessage_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_ChannelMessage_identifier, &AutomotiveBus_Signal_Channel_ChannelMessage_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_ChannelMessage_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Signal_Channel_ChannelMessage_type_identifier, &AutomotiveBus_Signal_Channel_ChannelMessage_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_ChannelMessage_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Signal_Channel_ChannelMessage_verify_table);
}

static inline int AutomotiveBus_Signal_Channel_ChannelMessage_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Signal_Channel_ChannelMessage_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* CHANNEL_VERIFIER_H */
