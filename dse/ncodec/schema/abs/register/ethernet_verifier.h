#ifndef ETHERNET_VERIFIER_H
#define ETHERNET_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef ETHERNET_READER_H
#include "ethernet_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Register_Ethernet_Frame_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Register_Ethernet_MetaFrame_verify_table(flatcc_table_verifier_descriptor_t *td);
static int AutomotiveBus_Register_Ethernet_RegisterFile_verify_table(flatcc_table_verifier_descriptor_t *td);

static inline int AutomotiveBus_Register_Ethernet_TimeSpec_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_TimeSpec_identifier, 8, 8);
}

static inline int AutomotiveBus_Register_Ethernet_TimeSpec_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_TimeSpec_type_hash, 8, 8);
}

static inline int AutomotiveBus_Register_Ethernet_TimeSpec_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 8, 8);
}

static inline int AutomotiveBus_Register_Ethernet_TimeSpec_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 8, 8);
}

static inline int AutomotiveBus_Register_Ethernet_MessageTiming_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_MessageTiming_identifier, 24, 8);
}

static inline int AutomotiveBus_Register_Ethernet_MessageTiming_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_MessageTiming_type_hash, 24, 8);
}

static inline int AutomotiveBus_Register_Ethernet_MessageTiming_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 24, 8);
}

static inline int AutomotiveBus_Register_Ethernet_MessageTiming_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 24, 8);
}

static int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* sync */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_EthernetStatus_identifier, &AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_EthernetStatus_type_identifier, &AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_EthernetStatus_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Register_Ethernet_EthernetStatus_verify_table);
}

static int AutomotiveBus_Register_Ethernet_Frame_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* dest_mac */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 1, 1, INT64_C(4294967295)) /* src_mac */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* vlan_tag */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 2, 2) /* ether_type */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 4, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 2, 2) /* length */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Register_Ethernet_Frame_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_Frame_identifier, &AutomotiveBus_Register_Ethernet_Frame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_Frame_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_Frame_type_identifier, &AutomotiveBus_Register_Ethernet_Frame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_Frame_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Register_Ethernet_Frame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_Frame_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Register_Ethernet_Frame_verify_table);
}

static int AutomotiveBus_Register_Ethernet_MetaFrame_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* status */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* direction */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &AutomotiveBus_Register_Ethernet_Frame_verify_table) /* frame */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 24, 8) /* timing */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Register_Ethernet_MetaFrame_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_MetaFrame_identifier, &AutomotiveBus_Register_Ethernet_MetaFrame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_MetaFrame_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_MetaFrame_type_identifier, &AutomotiveBus_Register_Ethernet_MetaFrame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_MetaFrame_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Register_Ethernet_MetaFrame_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_MetaFrame_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Register_Ethernet_MetaFrame_verify_table);
}

static int AutomotiveBus_Register_Ethernet_RegisterFile_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &AutomotiveBus_Register_Ethernet_MetaFrame_verify_table) /* buffer */)) return ret;
    return flatcc_verify_ok;
}

static inline int AutomotiveBus_Register_Ethernet_RegisterFile_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_RegisterFile_identifier, &AutomotiveBus_Register_Ethernet_RegisterFile_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_RegisterFile_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, AutomotiveBus_Register_Ethernet_RegisterFile_type_identifier, &AutomotiveBus_Register_Ethernet_RegisterFile_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_RegisterFile_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &AutomotiveBus_Register_Ethernet_RegisterFile_verify_table);
}

static inline int AutomotiveBus_Register_Ethernet_RegisterFile_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &AutomotiveBus_Register_Ethernet_RegisterFile_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* ETHERNET_VERIFIER_H */
