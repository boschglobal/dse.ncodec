#ifndef FRAME_BUILDER_H
#define FRAME_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FRAME_READER_H
#include "frame_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "SFRA"
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __AutomotiveBus_Stream_Frame_CanFrameType_formal_args , AutomotiveBus_Stream_Frame_CanFrameType_enum_t v0
#define __AutomotiveBus_Stream_Frame_CanFrameType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, AutomotiveBus_Stream_Frame_CanFrameType, AutomotiveBus_Stream_Frame_CanFrameType_enum_t)

typedef flatbuffers_union_ref_t AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t;
typedef flatbuffers_union_vec_ref_t AutomotiveBus_Stream_Frame_FrameTypes_union_vec_ref_t;
static AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t AutomotiveBus_Stream_Frame_FrameTypes_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_FrameTypes_union_t t);

static const flatbuffers_voffset_t __AutomotiveBus_Stream_Frame_Timing_required[] = { 0 };
typedef flatbuffers_ref_t AutomotiveBus_Stream_Frame_Timing_ref_t;
static AutomotiveBus_Stream_Frame_Timing_ref_t AutomotiveBus_Stream_Frame_Timing_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Timing_table_t t);
__flatbuffers_build_table(flatbuffers_, AutomotiveBus_Stream_Frame_Timing, 3)

static const flatbuffers_voffset_t __AutomotiveBus_Stream_Frame_CanFrame_required[] = { 0 };
typedef flatbuffers_ref_t AutomotiveBus_Stream_Frame_CanFrame_ref_t;
static AutomotiveBus_Stream_Frame_CanFrame_ref_t AutomotiveBus_Stream_Frame_CanFrame_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_CanFrame_table_t t);
__flatbuffers_build_table(flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame, 7)

static const flatbuffers_voffset_t __AutomotiveBus_Stream_Frame_Frame_required[] = { 0 };
typedef flatbuffers_ref_t AutomotiveBus_Stream_Frame_Frame_ref_t;
static AutomotiveBus_Stream_Frame_Frame_ref_t AutomotiveBus_Stream_Frame_Frame_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Frame_table_t t);
__flatbuffers_build_table(flatbuffers_, AutomotiveBus_Stream_Frame_Frame, 2)

static const flatbuffers_voffset_t __AutomotiveBus_Stream_Frame_Stream_required[] = { 0 };
typedef flatbuffers_ref_t AutomotiveBus_Stream_Frame_Stream_ref_t;
static AutomotiveBus_Stream_Frame_Stream_ref_t AutomotiveBus_Stream_Frame_Stream_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Stream_table_t t);
__flatbuffers_build_table(flatbuffers_, AutomotiveBus_Stream_Frame_Stream, 2)

#define __AutomotiveBus_Stream_Frame_Timing_formal_args , int64_t v0, int64_t v1, int64_t v2
#define __AutomotiveBus_Stream_Frame_Timing_call_args , v0, v1, v2
static inline AutomotiveBus_Stream_Frame_Timing_ref_t AutomotiveBus_Stream_Frame_Timing_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Timing_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, AutomotiveBus_Stream_Frame_Timing, AutomotiveBus_Stream_Frame_Timing_identifier, AutomotiveBus_Stream_Frame_Timing_type_identifier)

#define __AutomotiveBus_Stream_Frame_CanFrame_formal_args ,\
  uint32_t v0, flatbuffers_uint8_vec_ref_t v1, AutomotiveBus_Stream_Frame_CanFrameType_enum_t v2, uint8_t v3,\
  uint8_t v4, uint8_t v5, AutomotiveBus_Stream_Frame_Timing_ref_t v6
#define __AutomotiveBus_Stream_Frame_CanFrame_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline AutomotiveBus_Stream_Frame_CanFrame_ref_t AutomotiveBus_Stream_Frame_CanFrame_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_CanFrame_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame, AutomotiveBus_Stream_Frame_CanFrame_identifier, AutomotiveBus_Stream_Frame_CanFrame_type_identifier)

#define __AutomotiveBus_Stream_Frame_Frame_formal_args , AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t v1
#define __AutomotiveBus_Stream_Frame_Frame_call_args , v1
static inline AutomotiveBus_Stream_Frame_Frame_ref_t AutomotiveBus_Stream_Frame_Frame_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Frame_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, AutomotiveBus_Stream_Frame_Frame, AutomotiveBus_Stream_Frame_Frame_identifier, AutomotiveBus_Stream_Frame_Frame_type_identifier)

#define __AutomotiveBus_Stream_Frame_Stream_formal_args , AutomotiveBus_Stream_Frame_Frame_vec_ref_t v0, uint32_t v1
#define __AutomotiveBus_Stream_Frame_Stream_call_args , v0, v1
static inline AutomotiveBus_Stream_Frame_Stream_ref_t AutomotiveBus_Stream_Frame_Stream_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Stream_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, AutomotiveBus_Stream_Frame_Stream, AutomotiveBus_Stream_Frame_Stream_identifier, AutomotiveBus_Stream_Frame_Stream_type_identifier)

static inline AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t AutomotiveBus_Stream_Frame_FrameTypes_as_NONE()
{ AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t uref; uref.type = AutomotiveBus_Stream_Frame_FrameTypes_NONE; uref.value = 0; return uref; }
static inline AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t AutomotiveBus_Stream_Frame_FrameTypes_as_CanFrame(AutomotiveBus_Stream_Frame_CanFrame_ref_t ref)
{ AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t uref; uref.type = AutomotiveBus_Stream_Frame_FrameTypes_CanFrame; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, AutomotiveBus_Stream_Frame_FrameTypes)

static AutomotiveBus_Stream_Frame_FrameTypes_union_ref_t AutomotiveBus_Stream_Frame_FrameTypes_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_FrameTypes_union_t u)
{
    switch (u.type) {
    case 1: return AutomotiveBus_Stream_Frame_FrameTypes_as_CanFrame(AutomotiveBus_Stream_Frame_CanFrame_clone(B, (AutomotiveBus_Stream_Frame_CanFrame_table_t)u.value));
    default: return AutomotiveBus_Stream_Frame_FrameTypes_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, AutomotiveBus_Stream_Frame_Timing_send, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), AutomotiveBus_Stream_Frame_Timing)
__flatbuffers_build_scalar_field(1, flatbuffers_, AutomotiveBus_Stream_Frame_Timing_arbitration, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), AutomotiveBus_Stream_Frame_Timing)
__flatbuffers_build_scalar_field(2, flatbuffers_, AutomotiveBus_Stream_Frame_Timing_recv, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), AutomotiveBus_Stream_Frame_Timing)

static inline AutomotiveBus_Stream_Frame_Timing_ref_t AutomotiveBus_Stream_Frame_Timing_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Timing_formal_args)
{
    if (AutomotiveBus_Stream_Frame_Timing_start(B)
        || AutomotiveBus_Stream_Frame_Timing_send_add(B, v0)
        || AutomotiveBus_Stream_Frame_Timing_arbitration_add(B, v1)
        || AutomotiveBus_Stream_Frame_Timing_recv_add(B, v2)) {
        return 0;
    }
    return AutomotiveBus_Stream_Frame_Timing_end(B);
}

static AutomotiveBus_Stream_Frame_Timing_ref_t AutomotiveBus_Stream_Frame_Timing_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Timing_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (AutomotiveBus_Stream_Frame_Timing_start(B)
        || AutomotiveBus_Stream_Frame_Timing_send_pick(B, t)
        || AutomotiveBus_Stream_Frame_Timing_arbitration_pick(B, t)
        || AutomotiveBus_Stream_Frame_Timing_recv_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, AutomotiveBus_Stream_Frame_Timing_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_frame_id, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_vector_field(1, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_payload, flatbuffers_uint8, uint8_t, AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_scalar_field(2, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_frame_type, AutomotiveBus_Stream_Frame_CanFrameType, AutomotiveBus_Stream_Frame_CanFrameType_enum_t, 1, 1, INT8_C(0), AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_scalar_field(3, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_bus_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_scalar_field(4, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_node_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_scalar_field(5, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_interface_id, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), AutomotiveBus_Stream_Frame_CanFrame)
__flatbuffers_build_table_field(6, flatbuffers_, AutomotiveBus_Stream_Frame_CanFrame_timing, AutomotiveBus_Stream_Frame_Timing, AutomotiveBus_Stream_Frame_CanFrame)

static inline AutomotiveBus_Stream_Frame_CanFrame_ref_t AutomotiveBus_Stream_Frame_CanFrame_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_CanFrame_formal_args)
{
    if (AutomotiveBus_Stream_Frame_CanFrame_start(B)
        || AutomotiveBus_Stream_Frame_CanFrame_frame_id_add(B, v0)
        || AutomotiveBus_Stream_Frame_CanFrame_payload_add(B, v1)
        || AutomotiveBus_Stream_Frame_CanFrame_timing_add(B, v6)
        || AutomotiveBus_Stream_Frame_CanFrame_frame_type_add(B, v2)
        || AutomotiveBus_Stream_Frame_CanFrame_bus_id_add(B, v3)
        || AutomotiveBus_Stream_Frame_CanFrame_node_id_add(B, v4)
        || AutomotiveBus_Stream_Frame_CanFrame_interface_id_add(B, v5)) {
        return 0;
    }
    return AutomotiveBus_Stream_Frame_CanFrame_end(B);
}

static AutomotiveBus_Stream_Frame_CanFrame_ref_t AutomotiveBus_Stream_Frame_CanFrame_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_CanFrame_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (AutomotiveBus_Stream_Frame_CanFrame_start(B)
        || AutomotiveBus_Stream_Frame_CanFrame_frame_id_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_payload_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_timing_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_frame_type_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_bus_id_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_node_id_pick(B, t)
        || AutomotiveBus_Stream_Frame_CanFrame_interface_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, AutomotiveBus_Stream_Frame_CanFrame_end(B));
}

__flatbuffers_build_union_field(1, flatbuffers_, AutomotiveBus_Stream_Frame_Frame_f, AutomotiveBus_Stream_Frame_FrameTypes, AutomotiveBus_Stream_Frame_Frame)
__flatbuffers_build_union_table_value_field(flatbuffers_, AutomotiveBus_Stream_Frame_Frame_f, AutomotiveBus_Stream_Frame_FrameTypes, CanFrame, AutomotiveBus_Stream_Frame_CanFrame)

static inline AutomotiveBus_Stream_Frame_Frame_ref_t AutomotiveBus_Stream_Frame_Frame_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Frame_formal_args)
{
    if (AutomotiveBus_Stream_Frame_Frame_start(B)
        || AutomotiveBus_Stream_Frame_Frame_f_add_value(B, v1)
        || AutomotiveBus_Stream_Frame_Frame_f_add_type(B, v1.type)) {
        return 0;
    }
    return AutomotiveBus_Stream_Frame_Frame_end(B);
}

static AutomotiveBus_Stream_Frame_Frame_ref_t AutomotiveBus_Stream_Frame_Frame_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Frame_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (AutomotiveBus_Stream_Frame_Frame_start(B)
        || AutomotiveBus_Stream_Frame_Frame_f_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, AutomotiveBus_Stream_Frame_Frame_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, AutomotiveBus_Stream_Frame_Stream_frames, AutomotiveBus_Stream_Frame_Frame, AutomotiveBus_Stream_Frame_Stream)
__flatbuffers_build_scalar_field(1, flatbuffers_, AutomotiveBus_Stream_Frame_Stream_node_uid, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), AutomotiveBus_Stream_Frame_Stream)

static inline AutomotiveBus_Stream_Frame_Stream_ref_t AutomotiveBus_Stream_Frame_Stream_create(flatbuffers_builder_t *B __AutomotiveBus_Stream_Frame_Stream_formal_args)
{
    if (AutomotiveBus_Stream_Frame_Stream_start(B)
        || AutomotiveBus_Stream_Frame_Stream_frames_add(B, v0)
        || AutomotiveBus_Stream_Frame_Stream_node_uid_add(B, v1)) {
        return 0;
    }
    return AutomotiveBus_Stream_Frame_Stream_end(B);
}

static AutomotiveBus_Stream_Frame_Stream_ref_t AutomotiveBus_Stream_Frame_Stream_clone(flatbuffers_builder_t *B, AutomotiveBus_Stream_Frame_Stream_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (AutomotiveBus_Stream_Frame_Stream_start(B)
        || AutomotiveBus_Stream_Frame_Stream_frames_pick(B, t)
        || AutomotiveBus_Stream_Frame_Stream_node_uid_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, AutomotiveBus_Stream_Frame_Stream_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* FRAME_BUILDER_H */
